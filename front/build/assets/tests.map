{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","front/tests/abilities/admin.jshint.lint-test.js","front/tests/adapters/application.jshint.lint-test.js","front/tests/app.jshint.lint-test.js","front/tests/authenticators/oauth2.jshint.lint-test.js","front/tests/authorizers/oauth2.jshint.lint-test.js","front/tests/components/load-more.jshint.lint-test.js","front/tests/components/model-selector.jshint.lint-test.js","front/tests/components/upload-file.jshint.lint-test.js","front/tests/controllers/application.jshint.lint-test.js","front/tests/controllers/events/edit.jshint.lint-test.js","front/tests/controllers/events/new.jshint.lint-test.js","front/tests/controllers/events/show.jshint.lint-test.js","front/tests/controllers/index.jshint.lint-test.js","front/tests/controllers/login.jshint.lint-test.js","front/tests/controllers/tracts/edit.jshint.lint-test.js","front/tests/controllers/tracts/new.jshint.lint-test.js","front/tests/helpers/destroy-app.js","front/tests/helpers/destroy-app.jshint.lint-test.js","front/tests/helpers/ember-cli-g-maps/register-async-helpers.js","front/tests/helpers/ember-cli-g-maps/select-autocomplete-place-helper.js","front/tests/helpers/ember-cli-g-maps/setup-test.js","front/tests/helpers/ember-cli-g-maps/stub-geocode-requests-helper.js","front/tests/helpers/ember-cli-g-maps/wait-for-geocode-requests-helper.js","front/tests/helpers/ember-cli-g-maps/wait-for-google-map-helper.js","front/tests/helpers/ember-simple-auth.js","front/tests/helpers/module-for-acceptance.js","front/tests/helpers/module-for-acceptance.jshint.lint-test.js","front/tests/helpers/resolver.js","front/tests/helpers/resolver.jshint.lint-test.js","front/tests/helpers/start-app.js","front/tests/helpers/start-app.jshint.lint-test.js","front/tests/integration/components/facebook-feed-test.js","front/tests/integration/components/facebook-feed-test.jshint.lint-test.js","front/tests/integration/components/load-more-test.js","front/tests/integration/components/load-more-test.jshint.lint-test.js","front/tests/integration/components/match-quiz-test.js","front/tests/integration/components/match-quiz-test.jshint.lint-test.js","front/tests/integration/components/model-selector-test.js","front/tests/integration/components/model-selector-test.jshint.lint-test.js","front/tests/integration/components/twitter-feed-test.js","front/tests/integration/components/twitter-feed-test.jshint.lint-test.js","front/tests/integration/components/upload-file-test.js","front/tests/integration/components/upload-file-test.jshint.lint-test.js","front/tests/integration/components/yes-no-test.js","front/tests/integration/components/yes-no-test.jshint.lint-test.js","front/tests/mixins/candidates/save-model-mixin.jshint.lint-test.js","front/tests/mixins/events/save-model-mixin.jshint.lint-test.js","front/tests/mixins/roles/save-model-mixin.jshint.lint-test.js","front/tests/mixins/users/save-model-mixin.jshint.lint-test.js","front/tests/models/asset.jshint.lint-test.js","front/tests/models/event.jshint.lint-test.js","front/tests/models/user.jshint.lint-test.js","front/tests/resolver.jshint.lint-test.js","front/tests/router.jshint.lint-test.js","front/tests/routes/application.jshint.lint-test.js","front/tests/routes/events/edit.jshint.lint-test.js","front/tests/routes/events/index.jshint.lint-test.js","front/tests/routes/events/new.jshint.lint-test.js","front/tests/routes/index.jshint.lint-test.js","front/tests/routes/login.jshint.lint-test.js","front/tests/routes/users/edit.jshint.lint-test.js","front/tests/routes/users/index.jshint.lint-test.js","front/tests/routes/users/new.jshint.lint-test.js","front/tests/services/session.jshint.lint-test.js","front/tests/test-helper.js","front/tests/test-helper.jshint.lint-test.js","front/tests/unit/abilities/admin-test.js","front/tests/unit/abilities/admin-test.jshint.lint-test.js","front/tests/unit/adapters/application-test.js","front/tests/unit/adapters/application-test.jshint.lint-test.js","front/tests/unit/controllers/application-test.js","front/tests/unit/controllers/application-test.jshint.lint-test.js","front/tests/unit/controllers/elections/edit-test.js","front/tests/unit/controllers/elections/edit-test.jshint.lint-test.js","front/tests/unit/controllers/elections/new-test.js","front/tests/unit/controllers/elections/new-test.jshint.lint-test.js","front/tests/unit/controllers/login-test.js","front/tests/unit/controllers/login-test.jshint.lint-test.js","front/tests/unit/controllers/tracts/edit-test.js","front/tests/unit/controllers/tracts/edit-test.jshint.lint-test.js","front/tests/unit/controllers/tracts/new-test.js","front/tests/unit/controllers/tracts/new-test.jshint.lint-test.js","front/tests/unit/models/alliance-test.js","front/tests/unit/models/alliance-test.jshint.lint-test.js","front/tests/unit/models/answer-test.js","front/tests/unit/models/answer-test.jshint.lint-test.js","front/tests/unit/models/asset-test.js","front/tests/unit/models/asset-test.jshint.lint-test.js","front/tests/unit/models/candidate-test.js","front/tests/unit/models/candidate-test.jshint.lint-test.js","front/tests/unit/models/category-test.js","front/tests/unit/models/category-test.jshint.lint-test.js","front/tests/unit/models/election-test.js","front/tests/unit/models/election-test.jshint.lint-test.js","front/tests/unit/models/election-type-test.js","front/tests/unit/models/election-type-test.jshint.lint-test.js","front/tests/unit/models/gang-test.js","front/tests/unit/models/gang-test.jshint.lint-test.js","front/tests/unit/models/guest-test.js","front/tests/unit/models/guest-test.jshint.lint-test.js","front/tests/unit/models/math-candidate-test.js","front/tests/unit/models/math-candidate-test.jshint.lint-test.js","front/tests/unit/models/position-test.js","front/tests/unit/models/position-test.jshint.lint-test.js","front/tests/unit/models/province-test.js","front/tests/unit/models/province-test.jshint.lint-test.js","front/tests/unit/models/question-test.js","front/tests/unit/models/question-test.jshint.lint-test.js","front/tests/unit/models/role-test.js","front/tests/unit/models/role-test.jshint.lint-test.js","front/tests/unit/models/roster-test.js","front/tests/unit/models/roster-test.jshint.lint-test.js","front/tests/unit/models/section-test.js","front/tests/unit/models/section-test.jshint.lint-test.js","front/tests/unit/models/town-test.js","front/tests/unit/models/town-test.jshint.lint-test.js","front/tests/unit/models/tract-test.js","front/tests/unit/models/tract-test.jshint.lint-test.js","front/tests/unit/models/tract-type-test.js","front/tests/unit/models/tract-type-test.jshint.lint-test.js","front/tests/unit/models/user-test.js","front/tests/unit/models/user-test.jshint.lint-test.js","front/tests/unit/routes/about-test.js","front/tests/unit/routes/about-test.jshint.lint-test.js","front/tests/unit/routes/application-test.js","front/tests/unit/routes/application-test.jshint.lint-test.js","front/tests/unit/routes/candidate/edit-test.js","front/tests/unit/routes/candidate/edit-test.jshint.lint-test.js","front/tests/unit/routes/candidate/index-test.js","front/tests/unit/routes/candidate/index-test.jshint.lint-test.js","front/tests/unit/routes/candidate/new-test.js","front/tests/unit/routes/candidate/new-test.jshint.lint-test.js","front/tests/unit/routes/candidates-test.js","front/tests/unit/routes/candidates-test.jshint.lint-test.js","front/tests/unit/routes/candidates/assemblymen-test.js","front/tests/unit/routes/candidates/assemblymen-test.jshint.lint-test.js","front/tests/unit/routes/candidates/presidents-test.js","front/tests/unit/routes/candidates/presidents-test.jshint.lint-test.js","front/tests/unit/routes/candidates/view-test.js","front/tests/unit/routes/candidates/view-test.jshint.lint-test.js","front/tests/unit/routes/index-test.js","front/tests/unit/routes/index-test.jshint.lint-test.js","front/tests/unit/routes/login-test.js","front/tests/unit/routes/login-test.jshint.lint-test.js","front/tests/unit/routes/methodology-test.js","front/tests/unit/routes/methodology-test.jshint.lint-test.js","front/tests/unit/routes/papeletas-test.js","front/tests/unit/routes/papeletas-test.jshint.lint-test.js","front/tests/unit/routes/result-test.js","front/tests/unit/routes/result-test.jshint.lint-test.js","front/tests/unit/routes/result/view-test.js","front/tests/unit/routes/result/view-test.jshint.lint-test.js","front/tests/unit/services/facebook-test.js","front/tests/unit/services/facebook-test.jshint.lint-test.js","front/tests/unit/services/quiz-manager-test.js","front/tests/unit/services/quiz-manager-test.jshint.lint-test.js","front/tests/unit/services/session-test.js","front/tests/unit/services/session-test.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('front/tests/abilities/admin.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | abilities/admin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'abilities/admin.js should pass jshint.');\n  });\n});","define('front/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 12, col 12, \\'Ember\\' is not defined.\\n\\n1 error');\n  });\n});","define('front/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('front/tests/authenticators/oauth2.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authenticators/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass jshint.');\n  });\n});","define('front/tests/authorizers/oauth2.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | authorizers/oauth2.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass jshint.');\n  });\n});","define('front/tests/components/load-more.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/load-more.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/load-more.js should pass jshint.\\ncomponents/load-more.js: line 1, col 16, \\'Ember\\' is not defined.\\n\\n1 error');\n  });\n});","define('front/tests/components/model-selector.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/model-selector.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/model-selector.js should pass jshint.');\n  });\n});","define('front/tests/components/upload-file.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/upload-file.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/upload-file.js should pass jshint.\\ncomponents/upload-file.js: line 39, col 26, \\'t\\' is not defined.\\ncomponents/upload-file.js: line 52, col 9, \\'$\\' is not defined.\\n\\n2 errors');\n  });\n});","define('front/tests/controllers/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('front/tests/controllers/events/edit.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/events/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/events/edit.js should pass jshint.\\ncontrollers/events/edit.js: line 2, col 34, Missing semicolon.\\ncontrollers/events/edit.js: line 1, col 8, \\'Ember\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('front/tests/controllers/events/new.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/events/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/events/new.js should pass jshint.\\ncontrollers/events/new.js: line 20, col 25, Missing semicolon.\\n\\n1 error');\n  });\n});","define('front/tests/controllers/events/show.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/events/show.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/events/show.js should pass jshint.\\ncontrollers/events/show.js: line 2, col 34, Missing semicolon.\\ncontrollers/events/show.js: line 1, col 8, \\'Ember\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('front/tests/controllers/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/index.js should pass jshint.\\ncontrollers/index.js: line 40, col 37, \\'occurrence\\' is defined but never used.\\ncontrollers/index.js: line 50, col 52, \\'properties\\' is defined but never used.\\ncontrollers/index.js: line 50, col 40, \\'occurrence\\' is defined but never used.\\ncontrollers/index.js: line 54, col 40, \\'occurrence\\' is defined but never used.\\ncontrollers/index.js: line 20, col 21, \\'moment\\' is not defined.\\ncontrollers/index.js: line 21, col 19, \\'moment\\' is not defined.\\n\\n6 errors');\n  });\n});","define('front/tests/controllers/login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass jshint.');\n  });\n});","define('front/tests/controllers/tracts/edit.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tracts/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/tracts/edit.js should pass jshint.\\ncontrollers/tracts/edit.js: line 2, col 34, Missing semicolon.\\ncontrollers/tracts/edit.js: line 1, col 8, \\'Ember\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('front/tests/controllers/tracts/new.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/tracts/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/tracts/new.js should pass jshint.');\n  });\n});","define('front/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('front/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('front/tests/helpers/ember-cli-g-maps/register-async-helpers', ['exports', 'ember', 'front/tests/helpers/ember-cli-g-maps/select-autocomplete-place-helper', 'front/tests/helpers/ember-cli-g-maps/wait-for-google-map-helper', 'front/tests/helpers/ember-cli-g-maps/wait-for-geocode-requests-helper', 'front/tests/helpers/ember-cli-g-maps/stub-geocode-requests-helper'], function (exports, _ember, _frontTestsHelpersEmberCliGMapsSelectAutocompletePlaceHelper, _frontTestsHelpersEmberCliGMapsWaitForGoogleMapHelper, _frontTestsHelpersEmberCliGMapsWaitForGeocodeRequestsHelper, _frontTestsHelpersEmberCliGMapsStubGeocodeRequestsHelper) {\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('selectPlace', function () {\n      _ember['default'].Logger.warn('Please replace disabled helper \"selectPlace\" with \"selectAutocompletePlace\" helper.\\nUsage details here: http://http://matt-jensen.github.io/ember-cli-g-maps/#/place-autocomplete/index');\n    });\n    _ember['default'].Test.registerAsyncHelper('selectAutocompletePlace', _frontTestsHelpersEmberCliGMapsSelectAutocompletePlaceHelper['default']);\n    _ember['default'].Test.registerAsyncHelper('waitForGoogleMap', _frontTestsHelpersEmberCliGMapsWaitForGoogleMapHelper['default']);\n    _ember['default'].Test.registerAsyncHelper('waitForGeocodeRequests', _frontTestsHelpersEmberCliGMapsWaitForGeocodeRequestsHelper['default']);\n    _ember['default'].Test.registerAsyncHelper('stubGeocodeRequests', _frontTestsHelpersEmberCliGMapsStubGeocodeRequestsHelper['default']);\n  };\n});","define('front/tests/helpers/ember-cli-g-maps/select-autocomplete-place-helper', ['exports', 'ember'], function (exports, _ember) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports.longPollExternalElement = longPollExternalElement;\n  var $ = _ember['default'].$;\n  var assert = _ember['default'].assert;\n\n  var GAUTOCOMPLETE_CLASS = 'g-autocomplete';\n  var GOOGLE_AUTOCOMPLETE_RESULTS = '.pac-container .pac-item';\n\n  exports['default'] = function (app) {\n    var requestedResult = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n    var selector = arguments.length <= 2 || arguments[2] === undefined ? '.' + GAUTOCOMPLETE_CLASS : arguments[2];\n\n    return new _ember['default'].Test.promise(function (resolve, reject) {\n\n      // User only provided selector argument\n      if (typeof requestedResult === 'string') {\n        selector = requestedResult;\n        requestedResult = 0;\n      }\n\n      longPollExternalElement(GOOGLE_AUTOCOMPLETE_RESULTS).then(function (autocompletePlaces) {\n        var textResults = autocompletePlaces.map(function (i, el) {\n          return $(el).text();\n        });\n\n        var _app$testHelpers$find = app.testHelpers.find(selector);\n\n        var _app$testHelpers$find2 = _slicedToArray(_app$testHelpers$find, 1);\n\n        var input = _app$testHelpers$find2[0];\n\n        assert('No g-autocomplete component found for selector: ' + selector, input && $(input).hasClass(GAUTOCOMPLETE_CLASS));\n\n        var targetResult = 0;\n\n        /*\n         * Set target to requested result if it exists\n         */\n        if (requestedResult > 0 && requestedResult <= textResults.length - 1) {\n          targetResult = parseInt(requestedResult, 10);\n        }\n\n        /*\n         * Keydown to requested result (40 = down arrow)\n         */\n        for (var i = 0; i <= targetResult; i++) {\n          google.maps.event.trigger(input, 'keydown', { keyCode: 40 });\n        }\n\n        // Select active result (13 = Enter)\n        google.maps.event.trigger(input, 'keydown', { keyCode: 13 });\n        _ember['default'].run.later(function () {\n          return resolve(textResults[targetResult]);\n        }, 300);\n      }, reject);\n    });\n  };\n\n  function longPollExternalElement(selector) {\n    return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      var pollAgain = (function () {\n        var counter = 0;\n\n        return function () {\n          /*\n           * NOTE searching for elements potentially outside of #ember-testing container\n           */\n          var results = $(selector);\n\n          if (results.length) {\n            return resolve(results);\n          }\n\n          if (counter > 5) {\n            return reject();\n          }\n\n          counter++;\n          _ember['default'].run.later(pollAgain, 300);\n        };\n      })();\n\n      pollAgain();\n    });\n  }\n\n  ;\n});","define(\"front/tests/helpers/ember-cli-g-maps/setup-test\", [\"exports\"], function (exports) {\n  exports[\"default\"] = function () {};\n\n  // TODO remove file @ v1\n});","define('front/tests/helpers/ember-cli-g-maps/stub-geocode-requests-helper', ['exports', 'rsvp', 'ember', 'ember-owner/get', 'ember-metal/utils', 'ember-runloop'], function (exports, _rsvp, _ember, _emberOwnerGet, _emberMetalUtils, _emberRunloop) {\n  exports.toPlaceResult = toPlaceResult;\n  var Logger = _ember['default'].Logger;\n\n  var ORIGINAL_GEOCODE = GMaps.prototype.geocode;\n  var IS_PHANTOMJS_ENV = typeof window === 'object' && window.hasOwnProperty('_phantom');\n\n  exports['default'] = function (app) {\n    var config = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var onlyPhantomJS = Boolean(config.onlyPhantomJS);\n\n    // Abandon if only stubbing phantomJS\n    if (onlyPhantomJS && IS_PHANTOMJS_ENV === false) {\n      return;\n    }\n\n    (0, _emberMetalUtils.assert)('A results array is required', config.results && config.results instanceof Array && config.results.length);\n\n    var stubs = undefined;\n    if (config.results[0] instanceof Array) {\n      // Clone 2 demensional array\n      stubs = config.results.map(function (results) {\n        return results.map(toPlaceResult);\n      });\n    } else {\n      // Clone 1 demensional into 2 demensional array\n      stubs = [config.results.map(toPlaceResult)];\n    }\n\n    (0, _emberMetalUtils.assert)('Geocode stubbed requests are still unresolved', ORIGINAL_GEOCODE === GMaps.prototype.geocode);\n\n    var stubIndex = 0;\n\n    /*\n     * Stub GMaps geocode\n     */\n    GMaps.prototype.geocode = function geocodeStub(_ref) {\n      var callback = _ref.callback;\n\n      (0, _emberRunloop['default'])(function () {\n        callback(stubs[stubIndex], 'OK');\n        stubIndex += 1;\n\n        if (stubIndex >= stubs.length) {\n          GMaps.prototype.geocode = ORIGINAL_GEOCODE;\n        }\n      });\n    };\n  };\n\n  function toPlaceResult(result) {\n    var clone = (0, _emberMetalUtils.copy)(result, true);\n    clone.geometry = clone.geometry || {};\n    clone.geometry.location = clone.geometry.location || {};\n\n    if (clone.hasOwnProperty('lat') && typeof clone.geometry.location.lat !== 'function') {\n      clone.geometry.location.lat = function () {\n        return clone.lat;\n      };\n    }\n\n    if (clone.hasOwnProperty('lng') && typeof clone.geometry.location.lng !== 'function') {\n      clone.geometry.location.lng = function () {\n        return clone.lng;\n      };\n    }\n\n    if (clone.hasOwnProperty('address') && !clone.formatted_address) {\n      clone.formatted_address = clone.address;\n    }\n\n    return clone;\n  }\n});","define('front/tests/helpers/ember-cli-g-maps/wait-for-geocode-requests-helper', ['exports', 'rsvp', 'ember', 'ember-owner/get', 'ember-metal/utils'], function (exports, _rsvp, _ember, _emberOwnerGet, _emberMetalUtils) {\n  var Logger = _ember['default'].Logger;\n\n  exports['default'] = function (app) {\n    var container = (0, _emberOwnerGet['default'])(app) || app.__container__;\n    (0, _emberMetalUtils.assert)('failed to recover application container', container);\n\n    var gMap = container.lookup && container.lookup('service:gMap');\n    (0, _emberMetalUtils.assert)('gMap service lookup failed', gMap);\n\n    return new _ember['default'].Test.promise(function (resolve, reject) {\n      _ember['default'].Test.adapter.asyncStart();\n\n      var queue = gMap._geocodeQueue || [];\n\n      if (!queue.length) {\n        Logger.warn('Geocode request queue was not found, or is currently empty');\n      }\n\n      return _rsvp['default'].Promise.all(queue).then(function () {\n        _ember['default'].run.scheduleOnce('afterRender', null, resolve);\n        _ember['default'].Test.adapter.asyncEnd();\n      })['catch'](function () {\n        reject();\n        _ember['default'].Test.adapter.asyncEnd();\n      });\n    });\n  };\n});","define('front/tests/helpers/ember-cli-g-maps/wait-for-google-map-helper', ['exports', 'ember', 'ember-cli-g-maps/utils/load-google-maps'], function (exports, _ember, _emberCliGMapsUtilsLoadGoogleMaps) {\n  var $ = _ember['default'].$;\n  var assert = _ember['default'].assert;\n\n  var EMBER_CLI_GMAPS_SELECTOR = '.ember-cli-g-map';\n\n  exports['default'] = function (app) {\n    var selector = arguments.length <= 1 || arguments[1] === undefined ? EMBER_CLI_GMAPS_SELECTOR : arguments[1];\n\n    return new _ember['default'].Test.promise(function (resolve, reject) {\n      _ember['default'].Test.adapter.asyncStart();\n\n      (0, _emberCliGMapsUtilsLoadGoogleMaps['default'])().then(function () {\n        _ember['default'].run.scheduleOnce('afterRender', function () {\n          var $map = $(selector);\n          assert('No g-maps component found at selector: ' + selector, !$map.length || !$map.eq(0).hasClass(EMBER_CLI_GMAPS_SELECTOR));\n\n          google.maps.event.addListenerOnce($map.get(0).__GOOGLE_MAP__, 'tilesloaded', function () {\n            _ember['default'].run(resolve);\n            _ember['default'].Test.adapter.asyncEnd();\n          });\n        });\n      })['catch'](function () {\n        reject();\n        _ember['default'].Test.adapter.asyncEnd();\n      });\n    });\n  };\n});","define('front/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('front/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'front/tests/helpers/start-app', 'front/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _frontTestsHelpersStartApp, _frontTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _frontTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _frontTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('front/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('front/tests/helpers/resolver', ['exports', 'front/resolver', 'front/config/environment'], function (exports, _frontResolver, _frontConfigEnvironment) {\n\n  var resolver = _frontResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _frontConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _frontConfigEnvironment['default'].podModulePrefix\n  };\n\n  resolver.pluralizedTypes.ability = 'abilities';\n\n  exports['default'] = resolver;\n});","define('front/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('front/tests/helpers/start-app', ['exports', 'ember', 'front/app', 'front/config/environment'], function (exports, _ember, _frontApp, _frontConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    // use defaults, but you can override\n    var attributes = _ember['default'].assign({}, _frontConfigEnvironment['default'].APP, attrs);\n\n    _ember['default'].run(function () {\n      application = _frontApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('front/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/facebook-feed-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('facebook-feed', 'Integration | Component | facebook feed', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'L7WfU/w/',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"facebook-feed\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'jlmeDjU0',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"facebook-feed\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/facebook-feed-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/facebook-feed-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/facebook-feed-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/load-more-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('load-more', 'Integration | Component | load more', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'i7YAHCtI',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"load-more\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '7wAM7C3F',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"load-more\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/load-more-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/load-more-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/load-more-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/match-quiz-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('match-quiz', 'Integration | Component | match quiz', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'DLk6Dsxk',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"match-quiz\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'vqNDiMUd',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"match-quiz\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/match-quiz-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/match-quiz-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/match-quiz-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/model-selector-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('model-selector', 'Integration | Component | model selector', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'DNlwkM4U',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"model-selector\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'YZ/oMjzs',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"model-selector\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/model-selector-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/model-selector-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/model-selector-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/twitter-feed-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('twitter-feed', 'Integration | Component | twitter feed', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'nFwGeVa7',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"twitter-feed\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'MHhWl7eK',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"twitter-feed\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/twitter-feed-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/twitter-feed-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/twitter-feed-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/upload-file-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('upload-file', 'Integration | Component | upload file', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '7plDkPae',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"upload-file\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'qDGyzXtH',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"upload-file\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/upload-file-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/upload-file-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/upload-file-test.js should pass jshint.');\n  });\n});","define('front/tests/integration/components/yes-no-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('yes-no', 'Integration | Component | yes no', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'iSQWY73Z',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"yes-no\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'YRjf8EPx',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"yes-no\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('front/tests/integration/components/yes-no-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/yes-no-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/yes-no-test.js should pass jshint.');\n  });\n});","define('front/tests/mixins/candidates/save-model-mixin.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/candidates/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/candidates/save-model-mixin.js should pass jshint.');\n  });\n});","define('front/tests/mixins/events/save-model-mixin.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/events/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/events/save-model-mixin.js should pass jshint.');\n  });\n});","define('front/tests/mixins/roles/save-model-mixin.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/roles/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/roles/save-model-mixin.js should pass jshint.');\n  });\n});","define('front/tests/mixins/users/save-model-mixin.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | mixins/users/save-model-mixin.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/users/save-model-mixin.js should pass jshint.');\n  });\n});","define('front/tests/models/asset.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/asset.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/asset.js should pass jshint.');\n  });\n});","define('front/tests/models/event.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/event.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/event.js should pass jshint.');\n  });\n});","define('front/tests/models/user.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('front/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('front/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('front/tests/routes/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('front/tests/routes/events/edit.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/events/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/events/edit.js should pass jshint.');\n  });\n});","define('front/tests/routes/events/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/events/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/events/index.js should pass jshint.');\n  });\n});","define('front/tests/routes/events/new.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/events/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/events/new.js should pass jshint.');\n  });\n});","define('front/tests/routes/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass jshint.\\nroutes/index.js: line 4, col 22, \\'argument\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('front/tests/routes/login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('front/tests/routes/users/edit.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/edit.js should pass jshint.');\n  });\n});","define('front/tests/routes/users/index.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/index.js should pass jshint.');\n  });\n});","define('front/tests/routes/users/new.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/users/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/users/new.js should pass jshint.');\n  });\n});","define('front/tests/services/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session.js should pass jshint.');\n  });\n});","define('front/tests/test-helper', ['exports', 'front/tests/helpers/resolver', 'ember-qunit'], function (exports, _frontTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_frontTestsHelpersResolver['default']);\n});","define('front/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('front/tests/unit/abilities/admin-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('ability:admin', 'Unit | Ability | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var ability = this.subject();\n    assert.ok(ability);\n  });\n});","define('front/tests/unit/abilities/admin-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/abilities/admin-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/abilities/admin-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('front/tests/unit/adapters/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/elections/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:elections/edit', 'Unit | Controller | elections/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/elections/edit-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/elections/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/elections/edit-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/elections/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:elections/new', 'Unit | Controller | elections/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/elections/new-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/elections/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/elections/new-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/login-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/tracts/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:tracts/edit', 'Unit | Controller | tracts/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/tracts/edit-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/tracts/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tracts/edit-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/controllers/tracts/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:tracts/new', 'Unit | Controller | tracts/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('front/tests/unit/controllers/tracts/new-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/tracts/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/tracts/new-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/alliance-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('alliance', 'Unit | Model | alliance', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/alliance-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/alliance-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/alliance-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/answer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('answer', 'Unit | Model | answer', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/answer-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/answer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/answer-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/asset-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('asset', 'Unit | Model | asset', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/asset-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/asset-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/asset-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/candidate-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('candidate', 'Unit | Model | candidate', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/candidate-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/candidate-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/candidate-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/category-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('category', 'Unit | Model | category', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/category-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/category-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/category-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/election-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('election', 'Unit | Model | election', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/election-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/election-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/election-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/election-type-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('election-type', 'Unit | Model | election type', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/election-type-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/election-type-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/election-type-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/gang-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('gang', 'Unit | Model | gang', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/gang-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/gang-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/gang-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/guest-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('guest', 'Unit | Model | guest', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/guest-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/guest-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/guest-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/math-candidate-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('math-candidate', 'Unit | Model | math candidate', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/math-candidate-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/math-candidate-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/math-candidate-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/position-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('position', 'Unit | Model | position', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/position-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/position-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/position-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/province-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('province', 'Unit | Model | province', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/province-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/province-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/province-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/question-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('question', 'Unit | Model | question', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/question-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/question-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/question-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/role-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('role', 'Unit | Model | role', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/role-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/role-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/role-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/roster-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('roster', 'Unit | Model | roster', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/roster-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/roster-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/roster-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/section-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('section', 'Unit | Model | section', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/section-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/section-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/section-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/town-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('town', 'Unit | Model | town', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/town-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/town-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/town-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/tract-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('tract', 'Unit | Model | tract', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/tract-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/tract-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/tract-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/tract-type-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('tract-type', 'Unit | Model | tract type', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/tract-type-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/tract-type-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/tract-type-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('front/tests/unit/models/user-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/about-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/about-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/about-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/application-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidate/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidate/edit', 'Unit | Route | candidate/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidate/edit-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidate/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidate/edit-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidate/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidate/index', 'Unit | Route | candidate/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidate/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidate/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidate/index-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidate/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidate/new', 'Unit | Route | candidate/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidate/new-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidate/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidate/new-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidates-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidates', 'Unit | Route | candidates', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidates-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidates-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidates-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidates/assemblymen-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidates/assemblymen', 'Unit | Route | candidates/assemblymen', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidates/assemblymen-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidates/assemblymen-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidates/assemblymen-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidates/presidents-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidates/presidents', 'Unit | Route | candidates/presidents', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidates/presidents-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidates/presidents-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidates/presidents-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/candidates/view-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:candidates/view', 'Unit | Route | candidates/view', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/candidates/view-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/candidates/view-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/candidates/view-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/index-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/login-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/login-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/login-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/methodology-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:methodology', 'Unit | Route | methodology', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/methodology-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/methodology-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/methodology-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/papeletas-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:papeletas', 'Unit | Route | papeletas', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/papeletas-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/papeletas-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/papeletas-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/result-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:result', 'Unit | Route | result', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/result-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/result-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/result-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/routes/result/view-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:result/view', 'Unit | Route | result/view', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('front/tests/unit/routes/result/view-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/result/view-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/result/view-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/services/facebook-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:facebook', 'Unit | Service | facebook', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('front/tests/unit/services/facebook-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/facebook-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/facebook-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/services/quiz-manager-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:quiz-manager', 'Unit | Service | quiz manager', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('front/tests/unit/services/quiz-manager-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/quiz-manager-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/quiz-manager-test.js should pass jshint.');\n  });\n});","define('front/tests/unit/services/session-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:session', 'Unit | Service | session', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('front/tests/unit/services/session-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/session-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('front/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}